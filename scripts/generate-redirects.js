#!/usr/bin/env node

// This script generates Netlify redirects for old post URLs
const fs = require('fs');
const path = require('path');

function generateRedirects() {
  console.log('Generating redirects for Netlify...');
  
  // Get posts directory
  const postsDirectory = path.join(process.cwd(), 'content/posts');
  
  // If directory doesn't exist, return early
  if (!fs.existsSync(postsDirectory)) {
    console.log('Posts directory not found, skipping redirect generation');
    return;
  }
  
  // Get list of post IDs
  const postIds = fs.readdirSync(postsDirectory)
    .filter(file => file.endsWith('.md'))
    .map(file => file.replace(/\.md$/, ''));
  
  // Generate redirect rules
  const redirectsHeader = [
    '# Redirect old post URLs to new structure',
    '# This file is automatically generated by the build process',
    '# Do not edit manually',
    ''
  ];
  
  const redirectRules = postIds.map(postId => {
    return `/${postId} /posts/${postId} 301`;
  });
  
  // Add a catch-all rule for any missing pages to the home page
  const catchAllRule = ['', '# Handle 404s', '/* /index.html 200'];
  
  // Combine all rules
  const redirectsContent = [
    ...redirectsHeader,
    ...redirectRules,
    ...catchAllRule
  ].join('\n');
  
  // Write to public/_redirects file
  const redirectsPath = path.join(process.cwd(), 'public/_redirects');
  fs.writeFileSync(redirectsPath, redirectsContent);
  
  // Also write to the 'out' directory if it exists (for NextJS export)
  const outRedirectsPath = path.join(process.cwd(), 'out/_redirects');
  if (fs.existsSync(path.dirname(outRedirectsPath))) {
    fs.writeFileSync(outRedirectsPath, redirectsContent);
  }
  
  console.log(`Generated redirects for ${postIds.length} posts`);
}

// Run immediately
generateRedirects();